security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
          
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    role_hierarchy:
            ROLE_BACK: [ ROLE_USER ]
            ROLE_1: [ROLE_USER]
            ROLE_2: [ROLE_USER]
            ROLE_USER_ADMIN: [ ROLE_BACK ]
            ROLE_SUPER: [ ROLE_ADMIN,ROLE_ALLOWED_TO_SWITCH ]
    providers:
        users_in_memory:
            memory:
                users:  
                    user1: { password: '$2y$13$M3AbZdcb0IjcsGfo5nUa1ujoXtmvVpeP7SKo8YPZkUwuwFvowmyrK', roles: ['ROLE_1'] }
                    user2: { password: 'user2pass', roles: ['ROLE_2'] }
                    user3: { password: 'user3pass', roles: ['ROLE_ADMIN'] }

    firewalls:
        
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: users_in_memory
            http_basic: 
                realm: Secured Area

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/accueil, roles: [ROLE_1, ROLE_2, ROLE_USER, ROLE_ADMIN] }
        - { path: ^/SI, roles: [ROLE_1, ROLE_USER] }
        - { path: ^/Reseau, roles: ROLE_2 }
        - { path: ^/*, roles: ROLE_USER }
        #- { path: ^/profile, roles: ROLE_USER }
